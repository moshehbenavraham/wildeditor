name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'

env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE: 'wildeditor-backend'
  REGISTRY: 'ghcr.io'
  # Alternative: Use Docker Hub instead
  # REGISTRY: 'docker.io'
  # DOCKER_HUB_USERNAME: 'your-dockerhub-username'

jobs:
  # Test and lint the Python backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/backend/src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          cd apps/backend/src
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx  # Testing dependencies
          
      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop build if there are Python syntax errors or undefined names
          flake8 apps/backend/src --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 apps/backend/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Type check with mypy
        run: |
          pip install mypy
          mypy apps/backend/src --ignore-missing-imports || true
          
      - name: Test with pytest
        run: |
          cd apps/backend
          
          # Set environment variables for testing
          export MYSQL_DATABASE_URL="mysql+pymysql://test:test@localhost:3306/test_db"
          export TESTING="1"
          
          # Run unit tests only (skip integration tests that require database)
          PYTHONPATH=. pytest tests/ -v -m "not integration" --tb=short
          
          # Run a basic smoke test to ensure the app can start
          python -c "
          import sys
          import os
          sys.path.insert(0, '.')
          os.environ['MYSQL_DATABASE_URL'] = 'mysql+pymysql://test:test@localhost:3306/test_db'
          os.environ['TESTING'] = '1'
          from src.main import app
          from fastapi.testclient import TestClient
          client = TestClient(app)
          response = client.get('/api/health')
          assert response.status_code == 200
          print('‚úÖ Smoke test passed: API is responding')
          "
          
      - name: Security check with bandit
        run: |
          pip install bandit
          bandit -r apps/backend/src -f json -o bandit-report.json || true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            bandit-report.json
          retention-days: 7

  # Build Docker image
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-backend
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Output image digest
        run: echo ${{ steps.build.outputs.digest }}

  # Deploy to development server
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test-backend, build-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: development
      url: http://api.wildeditor.luminari.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
          
      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          echo "Testing SSH connection to ${{ secrets.PRODUCTION_HOST }}..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} "echo 'SSH connection successful'"
          
      - name: Deploy to production server
        run: |
          # Create deployment script with secrets passed as arguments
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Configuration
          APP_DIR="/opt/wildeditor-backend"
          DOCKER_IMAGE="${{ env.REGISTRY }}/${{ github.repository }}-backend:latest"
          CONTAINER_NAME="wildeditor-backend"
          
          # Get database URL from command line argument
          MYSQL_DATABASE_URL="$1"
          FRONTEND_URL="$2"
          
          if [ -z "$MYSQL_DATABASE_URL" ]; then
            echo "‚ùå Database URL not provided"
            exit 1
          fi
          
          # Create app directory if it doesn't exist
          sudo mkdir -p $APP_DIR
          cd $APP_DIR
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          echo "üì¶ Pulling latest Docker image..."
          sudo docker pull $DOCKER_IMAGE
          
          # Stop existing container
          echo "üõë Stopping existing container..."
          sudo docker stop $CONTAINER_NAME || true
          sudo docker rm $CONTAINER_NAME || true
          
          # Start new container with secrets from GitHub
          echo "üèÉ Starting new container..."
          sudo docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p 8000:8000 \
            -e MYSQL_DATABASE_URL="$MYSQL_DATABASE_URL" \
            -e ENVIRONMENT="production" \
            -e DEBUG="false" \
            -e PORT="8000" \
            -e FRONTEND_URL="$FRONTEND_URL" \
            -e LOG_LEVEL="INFO" \
            -e WORKERS="4" \
            -e ENABLE_DOCS="false" \
            -v /var/log/wildeditor:/var/log/wildeditor \
            $DOCKER_IMAGE
          
          # Wait for container to be healthy
          echo "üè• Waiting for health check..."
          for i in {1..30}; do
            if sudo docker exec $CONTAINER_NAME python -c "import requests; requests.get('http://localhost:8000/api/health')" 2>/dev/null; then
              echo "‚úÖ Container is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Container failed to become healthy"
              sudo docker logs $CONTAINER_NAME
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Cleanup old images
          echo "üßπ Cleaning up old images..."
          sudo docker image prune -f
          
          echo "üéâ Deployment completed successfully!"
          EOF
          
          # Copy and execute deployment script with secrets
          echo "Copying deployment script to server..."
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 deploy.sh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/
          
          echo "Executing deployment script on server..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
            "chmod +x /tmp/deploy.sh && /tmp/deploy.sh '${{ secrets.MYSQL_DATABASE_URL }}' '${{ secrets.FRONTEND_URL }}'"
          
      - name: Verify deployment
        run: |
          # Wait a moment for the service to be fully ready
          sleep 10
          
          # Test the deployed API
          curl -f http://api.wildeditor.luminari.com/api/health || exit 1
          echo "‚úÖ Development deployment verified!"
          
      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üöÄ Backend Deployment Successful!\n
            - **Environment**: Development
            - **Version**: \`${{ github.sha }}\`
            - **API URL**: http://api.wildeditor.luminari.com
            - **Health Check**: ‚úÖ Passing
            - **Deployed by**: @${{ github.actor }}
            
            The backend is now live and ready to serve requests!`;
            
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: '${{ github.sha }}',
              body: output
            })

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-development.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ Wildeditor Backend deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on Failure
        if: needs.deploy-development.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Wildeditor Backend deployment to development failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
